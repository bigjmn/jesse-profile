
  <body>
    <div class="d-flex justify-content-center mt-2 projtitle"><h2>Shock and Draw</h2></div>



    <div class="container-fluid ">
      <iframe id='drawframe' src="/javascripts/drawpreview.html" ></iframe>


    </div>

    <div class="container-fluid">
      <div class="d-flex justify-content-center  mb-3">





      <div class="context text-end pt-5">the project

      </div>
      <div class="p-5 content" >
        Shock and Draw is an online drawing-and-guessing game. Before the game, players divide themselves into two teams, Red and Blue. At the start of each round, one player on each team is the ‘drawer’, and the others are guessers. The guessers have to guess (via chat window) what their drawer is drawing. If they get it right, the team gets a point, the drawer is given a new prompt, and the game continues. Both teams play at once,  but guessers will automatically be shown the canvas and chat window for their team.
<br><br>
Whenever a drawer gets a new prompt, their team’s bonus timer is reset. If the team guesses the prompt within the bonus period, the opposing team is hit by a random attack. Both sides see the attack graphic, which shows the attack timer and the attack rules. There are currently six different attacks, three of which affect the drawer and three the guessers.
<br><br>
<span style="font-weight:bold">Attacks targeting the drawer:</span>

<br><br>
<span style='text-decoration: underline'>The Taker</span>

<br>
Drawer is unable to use colors.
<br><br>
<span style='text-decoration: underline'>Johnny Fat-Hands</span>

<br>
Drawer must use the biggest brush size.
<br><br>
<span style='text-decoration: underline'>HideMau5</span>

<br>
Drawer can’t see the cursor.
<br><br>
<span style="font-weight:bold">Attacks targeting the guessers:</span>
<br><br>
<span style='text-decoration: underline'>esreveR</span>

<br>
Guesses all come in backwards.
<br><br>
<span style='text-decoration: underline'>Classified</span>
<br>
Guesses can’t be seen by anyone on the team (are logged as REDACTED).
<br><br>
<span style='text-decoration: underline'>Peeping Tom</span>
<br>
Guessers have their view of the canvas blocked by a black filter. Clicking the filter reveals a small circular section of the canvas, centered at where the user clicked. The user must drag the mouse around to view different parts of the canvas.
<br><br>
Attacks last for 30 seconds each and can overlap. They are chosen at random, but a team can’t be hit by an attack already affecting it. This technically means a team being affected by all six attacks at once can’t be hit until one of their attacks expires. That’s fine - they’re in enough trouble already.

A drawer can ‘pass’ on a term, but doing so results in an attack on his own team. Attacks don’t carry over between rounds.

At the end of each round, the team point totals are updated. The team with the most points at the end of the final round wins.
<br><br>
<p>You can play the game <a href="https://shock-and-draw.herokuapp.com/">here</a>. Or, check out the <a href="https://github.com/bigjmn/shock-and-draw">GitHub repo.</a> </p>








      </div>
        </div>

        <div class="d-flex justify-content-center  mb-3">





        <div class="context text-end pt-5">what I used

        </div>
        <div class="p-5 content" >
          <p>I used Node JS on the backend, with React as the frontend framework and SocketIO for real time communications. I compiled my list of drawing prompts from a few different pictionary word lists. I made sure to take the ‘easy’ words - I learned from a very early play test that the attacks - particularly the drawer attacks - make harder words nearly impossible.</p>
          <p>Configuring the backend was tougher than I had anticipated. React applications are usually served as the homepage, and use a ‘browser router’ to navigate via URL. But I needed the routing to be handled by express, so I could use the request parameters to join the user to the right game session (or start a new game, serve an error page, etc.) and so that the server socket could use the separate namespaces for event-handling. In the end I found the easiest thing was to serve the React build only after express successfully reroutes the client to the appropriate namespace</p>






        </div>
          </div>

          <div class="d-flex justify-content-center  mb-3">





          <div class="context text-end pt-5">thoughts

          </div>
          <div class="p-5 content" >
            <p>The game is pretty fun! It’s not easy, especially when the attacks stack up. Attacks against the drawer are definitely harder to deal with than the ones against the guessers, and Johnny Fat-Hands is probably the toughest in the game. </p>
            <p>The biggest issue is probably the layout. It’s not responsive, which is an issue because there are a lot of components. Ideally the canvas would shrink with the browser. I don’t think it’ll be that tough, but it will take some time. </p>







          </div>
            </div>

            <div class="d-flex justify-content-center  mb-3">





            <div class="context text-end pt-5">next steps

            </div>
            <div class="p-5 content" >
              <p>I want to find a way to handle mid-game disconnections and reconnections. A player should be able to refresh the page mid-game without messing up the session. That’s definitely going to require some big changes. At the very least cookies, and at the very most an entire overhaul using Redux. Right now, a guesser disconnecting mid-game won’t ruin the session, but they won’t be able to rejoin. A drawer quitting is worse, but there’s only so much that can be done in that scenario. It might just have to trigger the end of the round. Beyond that, it’s all about CSS. Making the page responsive, but also just prettier in general.
 </p>







            </div>
              </div>






    </div>




  </body>
